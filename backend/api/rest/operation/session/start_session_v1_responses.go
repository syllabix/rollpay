// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/syllabix/rollpay/backend/api/model"
)

// StartSessionV1CreatedCode is the HTTP code returned for type StartSessionV1Created
const StartSessionV1CreatedCode int = 201

/*StartSessionV1Created a newly issued rollpay auth token

swagger:response startSessionV1Created
*/
type StartSessionV1Created struct {

	/*
	  In: Body
	*/
	Payload *model.RollpayToken `json:"body,omitempty"`
}

// NewStartSessionV1Created creates StartSessionV1Created with default headers values
func NewStartSessionV1Created() *StartSessionV1Created {

	return &StartSessionV1Created{}
}

// WithPayload adds the payload to the start session v1 created response
func (o *StartSessionV1Created) WithPayload(payload *model.RollpayToken) *StartSessionV1Created {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start session v1 created response
func (o *StartSessionV1Created) SetPayload(payload *model.RollpayToken) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartSessionV1Created) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartSessionV1UnauthorizedCode is the HTTP code returned for type StartSessionV1Unauthorized
const StartSessionV1UnauthorizedCode int = 401

/*StartSessionV1Unauthorized The requested resource requires authentication.

swagger:response startSessionV1Unauthorized
*/
type StartSessionV1Unauthorized struct {

	/*
	  In: Body
	*/
	Payload *model.StandardError `json:"body,omitempty"`
}

// NewStartSessionV1Unauthorized creates StartSessionV1Unauthorized with default headers values
func NewStartSessionV1Unauthorized() *StartSessionV1Unauthorized {

	return &StartSessionV1Unauthorized{}
}

// WithPayload adds the payload to the start session v1 unauthorized response
func (o *StartSessionV1Unauthorized) WithPayload(payload *model.StandardError) *StartSessionV1Unauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start session v1 unauthorized response
func (o *StartSessionV1Unauthorized) SetPayload(payload *model.StandardError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartSessionV1Unauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartSessionV1InternalServerErrorCode is the HTTP code returned for type StartSessionV1InternalServerError
const StartSessionV1InternalServerErrorCode int = 500

/*StartSessionV1InternalServerError An unexpected system or network error occured.

swagger:response startSessionV1InternalServerError
*/
type StartSessionV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *model.StandardError `json:"body,omitempty"`
}

// NewStartSessionV1InternalServerError creates StartSessionV1InternalServerError with default headers values
func NewStartSessionV1InternalServerError() *StartSessionV1InternalServerError {

	return &StartSessionV1InternalServerError{}
}

// WithPayload adds the payload to the start session v1 internal server error response
func (o *StartSessionV1InternalServerError) WithPayload(payload *model.StandardError) *StartSessionV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start session v1 internal server error response
func (o *StartSessionV1InternalServerError) SetPayload(payload *model.StandardError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartSessionV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
