// Code generated by go-swagger; DO NOT EDIT.

package session

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/syllabix/rollpay/backend/api/model"
)

// EndSessionV1HandlerFunc turns a function with the right signature into a end session v1 handler
type EndSessionV1HandlerFunc func(EndSessionV1Params, *model.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn EndSessionV1HandlerFunc) Handle(params EndSessionV1Params, principal *model.Principal) middleware.Responder {
	return fn(params, principal)
}

// EndSessionV1Handler interface for that can handle valid end session v1 params
type EndSessionV1Handler interface {
	Handle(EndSessionV1Params, *model.Principal) middleware.Responder
}

// NewEndSessionV1 creates a new http.Handler for the end session v1 operation
func NewEndSessionV1(ctx *middleware.Context, handler EndSessionV1Handler) *EndSessionV1 {
	return &EndSessionV1{Context: ctx, Handler: handler}
}

/* EndSessionV1 swagger:route POST /v1/logout Session endSessionV1

terminate a session

*/
type EndSessionV1 struct {
	Context *middleware.Context
	Handler EndSessionV1Handler
}

func (o *EndSessionV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewEndSessionV1Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *model.Principal
	if uprinc != nil {
		principal = uprinc.(*model.Principal) // this is really a model.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
