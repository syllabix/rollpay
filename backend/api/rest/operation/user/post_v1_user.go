// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostV1UserHandlerFunc turns a function with the right signature into a post v1 user handler
type PostV1UserHandlerFunc func(PostV1UserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1UserHandlerFunc) Handle(params PostV1UserParams) middleware.Responder {
	return fn(params)
}

// PostV1UserHandler interface for that can handle valid post v1 user params
type PostV1UserHandler interface {
	Handle(PostV1UserParams) middleware.Responder
}

// NewPostV1User creates a new http.Handler for the post v1 user operation
func NewPostV1User(ctx *middleware.Context, handler PostV1UserHandler) *PostV1User {
	return &PostV1User{Context: ctx, Handler: handler}
}

/* PostV1User swagger:route POST /v1/user User postV1User

create a new user

*/
type PostV1User struct {
	Context *middleware.Context
	Handler PostV1UserHandler
}

func (o *PostV1User) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostV1UserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
