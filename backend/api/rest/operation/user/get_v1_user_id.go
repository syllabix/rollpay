// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1UserIDHandlerFunc turns a function with the right signature into a get v1 user ID handler
type GetV1UserIDHandlerFunc func(GetV1UserIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1UserIDHandlerFunc) Handle(params GetV1UserIDParams) middleware.Responder {
	return fn(params)
}

// GetV1UserIDHandler interface for that can handle valid get v1 user ID params
type GetV1UserIDHandler interface {
	Handle(GetV1UserIDParams) middleware.Responder
}

// NewGetV1UserID creates a new http.Handler for the get v1 user ID operation
func NewGetV1UserID(ctx *middleware.Context, handler GetV1UserIDHandler) *GetV1UserID {
	return &GetV1UserID{Context: ctx, Handler: handler}
}

/* GetV1UserID swagger:route GET /v1/user/{id} User getV1UserId

get a user by id

*/
type GetV1UserID struct {
	Context *middleware.Context
	Handler GetV1UserIDHandler
}

func (o *GetV1UserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetV1UserIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
