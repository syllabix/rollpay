// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserByIDV1HandlerFunc turns a function with the right signature into a get user by ID v1 handler
type GetUserByIDV1HandlerFunc func(GetUserByIDV1Params) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserByIDV1HandlerFunc) Handle(params GetUserByIDV1Params) middleware.Responder {
	return fn(params)
}

// GetUserByIDV1Handler interface for that can handle valid get user by ID v1 params
type GetUserByIDV1Handler interface {
	Handle(GetUserByIDV1Params) middleware.Responder
}

// NewGetUserByIDV1 creates a new http.Handler for the get user by ID v1 operation
func NewGetUserByIDV1(ctx *middleware.Context, handler GetUserByIDV1Handler) *GetUserByIDV1 {
	return &GetUserByIDV1{Context: ctx, Handler: handler}
}

/* GetUserByIDV1 swagger:route GET /v1/user/{id} User getUserByIdV1

get a user by id

*/
type GetUserByIDV1 struct {
	Context *middleware.Context
	Handler GetUserByIDV1Handler
}

func (o *GetUserByIDV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserByIDV1Params()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
