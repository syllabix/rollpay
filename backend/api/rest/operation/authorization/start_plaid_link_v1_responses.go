// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/syllabix/rollpay/backend/api/model"
)

// StartPlaidLinkV1CreatedCode is the HTTP code returned for type StartPlaidLinkV1Created
const StartPlaidLinkV1CreatedCode int = 201

/*StartPlaidLinkV1Created a newly issued link token

swagger:response startPlaidLinkV1Created
*/
type StartPlaidLinkV1Created struct {

	/*
	  In: Body
	*/
	Payload *model.LinkToken `json:"body,omitempty"`
}

// NewStartPlaidLinkV1Created creates StartPlaidLinkV1Created with default headers values
func NewStartPlaidLinkV1Created() *StartPlaidLinkV1Created {

	return &StartPlaidLinkV1Created{}
}

// WithPayload adds the payload to the start plaid link v1 created response
func (o *StartPlaidLinkV1Created) WithPayload(payload *model.LinkToken) *StartPlaidLinkV1Created {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start plaid link v1 created response
func (o *StartPlaidLinkV1Created) SetPayload(payload *model.LinkToken) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartPlaidLinkV1Created) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartPlaidLinkV1BadRequestCode is the HTTP code returned for type StartPlaidLinkV1BadRequest
const StartPlaidLinkV1BadRequestCode int = 400

/*StartPlaidLinkV1BadRequest The provided request was invalid.

swagger:response startPlaidLinkV1BadRequest
*/
type StartPlaidLinkV1BadRequest struct {

	/*
	  In: Body
	*/
	Payload *model.StandardError `json:"body,omitempty"`
}

// NewStartPlaidLinkV1BadRequest creates StartPlaidLinkV1BadRequest with default headers values
func NewStartPlaidLinkV1BadRequest() *StartPlaidLinkV1BadRequest {

	return &StartPlaidLinkV1BadRequest{}
}

// WithPayload adds the payload to the start plaid link v1 bad request response
func (o *StartPlaidLinkV1BadRequest) WithPayload(payload *model.StandardError) *StartPlaidLinkV1BadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start plaid link v1 bad request response
func (o *StartPlaidLinkV1BadRequest) SetPayload(payload *model.StandardError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartPlaidLinkV1BadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// StartPlaidLinkV1InternalServerErrorCode is the HTTP code returned for type StartPlaidLinkV1InternalServerError
const StartPlaidLinkV1InternalServerErrorCode int = 500

/*StartPlaidLinkV1InternalServerError An unexpected system or network error occured.

swagger:response startPlaidLinkV1InternalServerError
*/
type StartPlaidLinkV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *model.StandardError `json:"body,omitempty"`
}

// NewStartPlaidLinkV1InternalServerError creates StartPlaidLinkV1InternalServerError with default headers values
func NewStartPlaidLinkV1InternalServerError() *StartPlaidLinkV1InternalServerError {

	return &StartPlaidLinkV1InternalServerError{}
}

// WithPayload adds the payload to the start plaid link v1 internal server error response
func (o *StartPlaidLinkV1InternalServerError) WithPayload(payload *model.StandardError) *StartPlaidLinkV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start plaid link v1 internal server error response
func (o *StartPlaidLinkV1InternalServerError) SetPayload(payload *model.StandardError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartPlaidLinkV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
