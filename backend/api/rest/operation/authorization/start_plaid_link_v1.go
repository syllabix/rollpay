// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/syllabix/rollpay/backend/api/model"
)

// StartPlaidLinkV1HandlerFunc turns a function with the right signature into a start plaid link v1 handler
type StartPlaidLinkV1HandlerFunc func(StartPlaidLinkV1Params, *model.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn StartPlaidLinkV1HandlerFunc) Handle(params StartPlaidLinkV1Params, principal *model.Principal) middleware.Responder {
	return fn(params, principal)
}

// StartPlaidLinkV1Handler interface for that can handle valid start plaid link v1 params
type StartPlaidLinkV1Handler interface {
	Handle(StartPlaidLinkV1Params, *model.Principal) middleware.Responder
}

// NewStartPlaidLinkV1 creates a new http.Handler for the start plaid link v1 operation
func NewStartPlaidLinkV1(ctx *middleware.Context, handler StartPlaidLinkV1Handler) *StartPlaidLinkV1 {
	return &StartPlaidLinkV1{Context: ctx, Handler: handler}
}

/* StartPlaidLinkV1 swagger:route POST /v1/auth/link-token Authorization startPlaidLinkV1

start an authorzation flow for Plaid link

*/
type StartPlaidLinkV1 struct {
	Context *middleware.Context
	Handler StartPlaidLinkV1Handler
}

func (o *StartPlaidLinkV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStartPlaidLinkV1Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *model.Principal
	if uprinc != nil {
		principal = uprinc.(*model.Principal) // this is really a model.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StartPlaidLinkV1Body start plaid link v1 body
//
// swagger:model StartPlaidLinkV1Body
type StartPlaidLinkV1Body struct {

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this start plaid link v1 body
func (o *StartPlaidLinkV1Body) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start plaid link v1 body based on context it is used
func (o *StartPlaidLinkV1Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartPlaidLinkV1Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartPlaidLinkV1Body) UnmarshalBinary(b []byte) error {
	var res StartPlaidLinkV1Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
