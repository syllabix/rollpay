// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/syllabix/rollpay/backend/api/model"
)

// CheckV1OKCode is the HTTP code returned for type CheckV1OK
const CheckV1OKCode int = 200

/*CheckV1OK operation was successful

swagger:response checkV1OK
*/
type CheckV1OK struct {

	/*
	  In: Body
	*/
	Payload *model.StandardResponse `json:"body,omitempty"`
}

// NewCheckV1OK creates CheckV1OK with default headers values
func NewCheckV1OK() *CheckV1OK {

	return &CheckV1OK{}
}

// WithPayload adds the payload to the check v1 o k response
func (o *CheckV1OK) WithPayload(payload *model.StandardResponse) *CheckV1OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check v1 o k response
func (o *CheckV1OK) SetPayload(payload *model.StandardResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckV1OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckV1InternalServerErrorCode is the HTTP code returned for type CheckV1InternalServerError
const CheckV1InternalServerErrorCode int = 500

/*CheckV1InternalServerError An unexpected system or network error occured.

swagger:response checkV1InternalServerError
*/
type CheckV1InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *model.StandardError `json:"body,omitempty"`
}

// NewCheckV1InternalServerError creates CheckV1InternalServerError with default headers values
func NewCheckV1InternalServerError() *CheckV1InternalServerError {

	return &CheckV1InternalServerError{}
}

// WithPayload adds the payload to the check v1 internal server error response
func (o *CheckV1InternalServerError) WithPayload(payload *model.StandardError) *CheckV1InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check v1 internal server error response
func (o *CheckV1InternalServerError) SetPayload(payload *model.StandardError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckV1InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
