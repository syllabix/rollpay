// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/syllabix/rollpay/backend/api/model"
)

// DeleteOrganizationByIDV1HandlerFunc turns a function with the right signature into a delete organization by ID v1 handler
type DeleteOrganizationByIDV1HandlerFunc func(DeleteOrganizationByIDV1Params, *model.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteOrganizationByIDV1HandlerFunc) Handle(params DeleteOrganizationByIDV1Params, principal *model.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteOrganizationByIDV1Handler interface for that can handle valid delete organization by ID v1 params
type DeleteOrganizationByIDV1Handler interface {
	Handle(DeleteOrganizationByIDV1Params, *model.Principal) middleware.Responder
}

// NewDeleteOrganizationByIDV1 creates a new http.Handler for the delete organization by ID v1 operation
func NewDeleteOrganizationByIDV1(ctx *middleware.Context, handler DeleteOrganizationByIDV1Handler) *DeleteOrganizationByIDV1 {
	return &DeleteOrganizationByIDV1{Context: ctx, Handler: handler}
}

/* DeleteOrganizationByIDV1 swagger:route DELETE /v1/organization/{id} Organization deleteOrganizationByIdV1

delete an organization by id

*/
type DeleteOrganizationByIDV1 struct {
	Context *middleware.Context
	Handler DeleteOrganizationByIDV1Handler
}

func (o *DeleteOrganizationByIDV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteOrganizationByIDV1Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *model.Principal
	if uprinc != nil {
		principal = uprinc.(*model.Principal) // this is really a model.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
