// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/syllabix/rollpay/backend/api/model"
)

// AddOrgMembersV1HandlerFunc turns a function with the right signature into a add org members v1 handler
type AddOrgMembersV1HandlerFunc func(AddOrgMembersV1Params, *model.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AddOrgMembersV1HandlerFunc) Handle(params AddOrgMembersV1Params, principal *model.Principal) middleware.Responder {
	return fn(params, principal)
}

// AddOrgMembersV1Handler interface for that can handle valid add org members v1 params
type AddOrgMembersV1Handler interface {
	Handle(AddOrgMembersV1Params, *model.Principal) middleware.Responder
}

// NewAddOrgMembersV1 creates a new http.Handler for the add org members v1 operation
func NewAddOrgMembersV1(ctx *middleware.Context, handler AddOrgMembersV1Handler) *AddOrgMembersV1 {
	return &AddOrgMembersV1{Context: ctx, Handler: handler}
}

/* AddOrgMembersV1 swagger:route PUT /v1/organization/{id}/member Organization addOrgMembersV1

add a member to an organization

*/
type AddOrgMembersV1 struct {
	Context *middleware.Context
	Handler AddOrgMembersV1Handler
}

func (o *AddOrgMembersV1) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAddOrgMembersV1Params()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *model.Principal
	if uprinc != nil {
		principal = uprinc.(*model.Principal) // this is really a model.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AddOrgMembersV1Body add org members v1 body
//
// swagger:model AddOrgMembersV1Body
type AddOrgMembersV1Body struct {

	// role
	// Required: true
	// Enum: [manager employee]
	Role *string `json:"role"`

	// user Id
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this add org members v1 body
func (o *AddOrgMembersV1Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addOrgMembersV1BodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manager","employee"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addOrgMembersV1BodyTypeRolePropEnum = append(addOrgMembersV1BodyTypeRolePropEnum, v)
	}
}

const (

	// AddOrgMembersV1BodyRoleManager captures enum value "manager"
	AddOrgMembersV1BodyRoleManager string = "manager"

	// AddOrgMembersV1BodyRoleEmployee captures enum value "employee"
	AddOrgMembersV1BodyRoleEmployee string = "employee"
)

// prop value enum
func (o *AddOrgMembersV1Body) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addOrgMembersV1BodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *AddOrgMembersV1Body) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("member"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	// value enum
	if err := o.validateRoleEnum("member"+"."+"role", "body", *o.Role); err != nil {
		return err
	}

	return nil
}

func (o *AddOrgMembersV1Body) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("member"+"."+"userId", "body", o.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add org members v1 body based on context it is used
func (o *AddOrgMembersV1Body) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddOrgMembersV1Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddOrgMembersV1Body) UnmarshalBinary(b []byte) error {
	var res AddOrgMembersV1Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
