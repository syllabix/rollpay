// Code generated by go-swagger; DO NOT EDIT.

package rest

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The restful interface for the Rollpay Service",
    "title": "Rollpay Rest API",
    "version": "dev mode"
  },
  "paths": {
    "/v1/auth/link-token": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "start an authorzation flow for Plaid link",
        "operationId": "StartPlaidLinkV1",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "a newly issued link token",
            "schema": {
              "$ref": "#/definitions/LinkToken"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        }
      ]
    },
    "/v1/healthz": {
      "get": {
        "security": [],
        "tags": [
          "Health"
        ],
        "summary": "application health check",
        "operationId": "CheckV1",
        "responses": {
          "200": {
            "$ref": "#/responses/OkResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      }
    },
    "/v1/login": {
      "post": {
        "security": [],
        "tags": [
          "Session"
        ],
        "summary": "attempt to login and receive an auth token for the service",
        "operationId": "StartSessionV1",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "a newly issued rollpay auth token",
            "schema": {
              "$ref": "#/definitions/RollpayToken"
            }
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        }
      ]
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "terminate a session",
        "operationId": "EndSessionV1",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RollpayToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "session has been terminated",
            "schema": {
              "$ref": "#/definitions/StandardResponse"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        }
      ]
    },
    "/v1/organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "get all organizations",
        "operationId": "GetAllOrgsV1",
        "responses": {
          "200": {
            "description": "a list of available organizations",
            "schema": {
              "$ref": "#/definitions/OrganizationList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "create a new organization",
        "operationId": "CreateOrganizationV1",
        "parameters": [
          {
            "type": "file",
            "description": "the organization logo",
            "name": "logo",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "a newly created organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        }
      ]
    },
    "/v1/organization/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "get an organization by id",
        "operationId": "GetOrganizationByIDV1",
        "responses": {
          "200": {
            "description": "a",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "update an organization by id",
        "operationId": "UpdateOrganizationByIDV1",
        "parameters": [
          {
            "type": "file",
            "description": "the organization logo",
            "name": "logo",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "name",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "a successfully updated organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "delete an organization by id",
        "operationId": "DeleteOrganizationByIDV1",
        "responses": {
          "200": {
            "$ref": "#/responses/OkResponse"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        },
        {
          "type": "string",
          "description": "the id of the org",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/organization/{id}/member": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "get all organization memebers",
        "operationId": "GetOrgMembersV1",
        "responses": {
          "200": {
            "description": "a list of organization memebers",
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "add a member to an organization",
        "operationId": "AddOrgMembersV1",
        "parameters": [
          {
            "name": "member",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "userId",
                "role"
              ],
              "properties": {
                "role": {
                  "type": "string",
                  "enum": [
                    "manager",
                    "employee"
                  ]
                },
                "userId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfully added member",
            "schema": {
              "$ref": "#/definitions/OrganizationMember"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        },
        {
          "type": "string",
          "description": "the id of the org",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/user": {
      "post": {
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "User"
        ],
        "summary": "create a new user",
        "operationId": "CreateUserV1",
        "parameters": [
          {
            "type": "file",
            "description": "the users avatar",
            "name": "avatar",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "password",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "username",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "a newly created user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        }
      ]
    },
    "/v1/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "get a user by id",
        "operationId": "GetUserByIDV1",
        "responses": {
          "200": {
            "description": "a",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "User"
        ],
        "summary": "update a user by id",
        "operationId": "UpdateUserByIDV1",
        "parameters": [
          {
            "type": "file",
            "description": "the users avatar",
            "name": "avatar",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "password",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "username",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "a successfully updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "409": {
            "$ref": "#/responses/409ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "delete a user by id",
        "operationId": "DeleteUserByIDV1",
        "responses": {
          "200": {
            "$ref": "#/responses/OkResponse"
          },
          "400": {
            "$ref": "#/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/responses/401ErrorResponse"
          },
          "404": {
            "$ref": "#/responses/404ErrorResponse"
          },
          "500": {
            "$ref": "#/responses/500ErrorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/userAgent"
        },
        {
          "$ref": "#/parameters/acceptLang"
        },
        {
          "type": "string",
          "description": "the id of the user",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Credentials": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "FieldError": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "readOnly": true,
          "example": "email address is required"
        },
        "field": {
          "type": "string",
          "readOnly": true,
          "example": "email"
        }
      }
    },
    "LinkToken": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "token": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "LinkedAccount": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MemberList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationMember"
          }
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedAccount"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "logo": {
          "type": "string",
          "format": "byte"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OrganizationList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        }
      }
    },
    "OrganizationMember": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string",
          "format": "byte",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "email",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "joined": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "role": {
          "type": "string",
          "enum": [
            "manager",
            "employee"
          ]
        },
        "username": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Principal": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "integer",
          "readOnly": true
        },
        "userId": {
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RollpayToken": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "token": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StandardError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StandardResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedAccount"
          }
        },
        "avatar": {
          "type": "string",
          "format": "byte"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldError"
          }
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "acceptLang": {
      "type": "string",
      "default": "en",
      "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
      "name": "Accept-Language",
      "in": "header"
    },
    "userAgent": {
      "type": "string",
      "default": "test-user",
      "name": "User-Agent",
      "in": "header"
    }
  },
  "responses": {
    "400ErrorResponse": {
      "description": "The provided request was invalid.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "401ErrorResponse": {
      "description": "The requested resource requires authentication.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "403ErrorResponse": {
      "description": "The request does not contain proper authorization to access this resource.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "404ErrorResponse": {
      "description": "The resource requested does not exist.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "409ErrorResponse": {
      "description": "A conflict with an existing resource or process occured.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "422ErrorResponse": {
      "description": "The request was unprocessable",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    },
    "500ErrorResponse": {
      "description": "An unexpected system or network error occured.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "501ErrorResponse": {
      "description": "The endpoint has not been implemented",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "503ErrorResponse": {
      "description": "The service is currently not available - please try again",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "529ErrorResponse": {
      "description": "the reqest limit has been reached - rejecting request",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "OkResponse": {
      "description": "operation was successful",
      "schema": {
        "$ref": "#/definitions/StandardResponse"
      }
    }
  },
  "securityDefinitions": {
    "isAuthenticated": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "isAuthenticated": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The restful interface for the Rollpay Service",
    "title": "Rollpay Rest API",
    "version": "dev mode"
  },
  "paths": {
    "/v1/auth/link-token": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "start an authorzation flow for Plaid link",
        "operationId": "StartPlaidLinkV1",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "a newly issued link token",
            "schema": {
              "$ref": "#/definitions/LinkToken"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        }
      ]
    },
    "/v1/healthz": {
      "get": {
        "security": [],
        "tags": [
          "Health"
        ],
        "summary": "application health check",
        "operationId": "CheckV1",
        "responses": {
          "200": {
            "description": "operation was successful",
            "schema": {
              "$ref": "#/definitions/StandardResponse"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      }
    },
    "/v1/login": {
      "post": {
        "security": [],
        "tags": [
          "Session"
        ],
        "summary": "attempt to login and receive an auth token for the service",
        "operationId": "StartSessionV1",
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "a newly issued rollpay auth token",
            "schema": {
              "$ref": "#/definitions/RollpayToken"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        }
      ]
    },
    "/v1/logout": {
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "terminate a session",
        "operationId": "EndSessionV1",
        "parameters": [
          {
            "name": "token",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RollpayToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "session has been terminated",
            "schema": {
              "$ref": "#/definitions/StandardResponse"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        }
      ]
    },
    "/v1/organization": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "get all organizations",
        "operationId": "GetAllOrgsV1",
        "responses": {
          "200": {
            "description": "a list of available organizations",
            "schema": {
              "$ref": "#/definitions/OrganizationList"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "create a new organization",
        "operationId": "CreateOrganizationV1",
        "parameters": [
          {
            "type": "file",
            "description": "the organization logo",
            "name": "logo",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "a newly created organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "409": {
            "description": "A conflict with an existing resource or process occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        }
      ]
    },
    "/v1/organization/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "get an organization by id",
        "operationId": "GetOrganizationByIDV1",
        "responses": {
          "200": {
            "description": "a",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "Organization"
        ],
        "summary": "update an organization by id",
        "operationId": "UpdateOrganizationByIDV1",
        "parameters": [
          {
            "type": "file",
            "description": "the organization logo",
            "name": "logo",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "name",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "a successfully updated organization",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "409": {
            "description": "A conflict with an existing resource or process occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "delete an organization by id",
        "operationId": "DeleteOrganizationByIDV1",
        "responses": {
          "200": {
            "description": "operation was successful",
            "schema": {
              "$ref": "#/definitions/StandardResponse"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        },
        {
          "type": "string",
          "description": "the id of the org",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/organization/{id}/member": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "get all organization memebers",
        "operationId": "GetOrgMembersV1",
        "responses": {
          "200": {
            "description": "a list of organization memebers",
            "schema": {
              "$ref": "#/definitions/MemberList"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "add a member to an organization",
        "operationId": "AddOrgMembersV1",
        "parameters": [
          {
            "name": "member",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "userId",
                "role"
              ],
              "properties": {
                "role": {
                  "type": "string",
                  "enum": [
                    "manager",
                    "employee"
                  ]
                },
                "userId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a successfully added member",
            "schema": {
              "$ref": "#/definitions/OrganizationMember"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "409": {
            "description": "A conflict with an existing resource or process occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        },
        {
          "type": "string",
          "description": "the id of the org",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/user": {
      "post": {
        "security": [],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "User"
        ],
        "summary": "create a new user",
        "operationId": "CreateUserV1",
        "parameters": [
          {
            "type": "file",
            "description": "the users avatar",
            "name": "avatar",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "password",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "name": "username",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "a newly created user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "409": {
            "description": "A conflict with an existing resource or process occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        }
      ]
    },
    "/v1/user/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "get a user by id",
        "operationId": "GetUserByIDV1",
        "responses": {
          "200": {
            "description": "a",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "User"
        ],
        "summary": "update a user by id",
        "operationId": "UpdateUserByIDV1",
        "parameters": [
          {
            "type": "file",
            "description": "the users avatar",
            "name": "avatar",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "password",
            "name": "password",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "username",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "a successfully updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "409": {
            "description": "A conflict with an existing resource or process occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "delete a user by id",
        "operationId": "DeleteUserByIDV1",
        "responses": {
          "200": {
            "description": "operation was successful",
            "schema": {
              "$ref": "#/definitions/StandardResponse"
            }
          },
          "400": {
            "description": "The provided request was invalid.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "401": {
            "description": "The requested resource requires authentication.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "404": {
            "description": "The resource requested does not exist.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          },
          "500": {
            "description": "An unexpected system or network error occured.",
            "schema": {
              "$ref": "#/definitions/StandardError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "default": "test-user",
          "name": "User-Agent",
          "in": "header"
        },
        {
          "type": "string",
          "default": "en",
          "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
          "name": "Accept-Language",
          "in": "header"
        },
        {
          "type": "string",
          "description": "the id of the user",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Credentials": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "FieldError": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "readOnly": true,
          "example": "email address is required"
        },
        "field": {
          "type": "string",
          "readOnly": true,
          "example": "email"
        }
      }
    },
    "LinkToken": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "token": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "LinkedAccount": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "MemberList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationMember"
          }
        }
      }
    },
    "Organization": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedAccount"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "logo": {
          "type": "string",
          "format": "byte"
        },
        "name": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "OrganizationList": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Organization"
          }
        }
      }
    },
    "OrganizationMember": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string",
          "format": "byte",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "email",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "joined": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "role": {
          "type": "string",
          "enum": [
            "manager",
            "employee"
          ]
        },
        "username": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Principal": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "integer",
          "readOnly": true
        },
        "userId": {
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "RollpayToken": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "token": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StandardError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "StandardResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedAccount"
          }
        },
        "avatar": {
          "type": "string",
          "format": "byte"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "id": {
          "type": "string",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldError"
          }
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "acceptLang": {
      "type": "string",
      "default": "en",
      "description": "the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language",
      "name": "Accept-Language",
      "in": "header"
    },
    "userAgent": {
      "type": "string",
      "default": "test-user",
      "name": "User-Agent",
      "in": "header"
    }
  },
  "responses": {
    "400ErrorResponse": {
      "description": "The provided request was invalid.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "401ErrorResponse": {
      "description": "The requested resource requires authentication.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "403ErrorResponse": {
      "description": "The request does not contain proper authorization to access this resource.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "404ErrorResponse": {
      "description": "The resource requested does not exist.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "409ErrorResponse": {
      "description": "A conflict with an existing resource or process occured.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "422ErrorResponse": {
      "description": "The request was unprocessable",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    },
    "500ErrorResponse": {
      "description": "An unexpected system or network error occured.",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "501ErrorResponse": {
      "description": "The endpoint has not been implemented",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "503ErrorResponse": {
      "description": "The service is currently not available - please try again",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "529ErrorResponse": {
      "description": "the reqest limit has been reached - rejecting request",
      "schema": {
        "$ref": "#/definitions/StandardError"
      }
    },
    "OkResponse": {
      "description": "operation was successful",
      "schema": {
        "$ref": "#/definitions/StandardResponse"
      }
    }
  },
  "securityDefinitions": {
    "isAuthenticated": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "isAuthenticated": []
    }
  ]
}`))
}
