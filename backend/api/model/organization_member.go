// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationMember organization member
//
// swagger:model OrganizationMember
type OrganizationMember struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// joined
	// Format: date-time
	Joined strfmt.DateTime `json:"joined,omitempty"`

	// role
	// Enum: [manager employee]
	Role string `json:"role,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this organization member
func (m *OrganizationMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJoined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationMember) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationMember) validateJoined(formats strfmt.Registry) error {
	if swag.IsZero(m.Joined) { // not required
		return nil
	}

	if err := validate.FormatOf("joined", "body", "date-time", m.Joined.String(), formats); err != nil {
		return err
	}

	return nil
}

var organizationMemberTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manager","employee"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationMemberTypeRolePropEnum = append(organizationMemberTypeRolePropEnum, v)
	}
}

const (

	// OrganizationMemberRoleManager captures enum value "manager"
	OrganizationMemberRoleManager string = "manager"

	// OrganizationMemberRoleEmployee captures enum value "employee"
	OrganizationMemberRoleEmployee string = "employee"
)

// prop value enum
func (m *OrganizationMember) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationMemberTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationMember) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this organization member based on the context it is used
func (m *OrganizationMember) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationMember) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationMember) UnmarshalBinary(b []byte) error {
	var res OrganizationMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
