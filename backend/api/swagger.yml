# REST API SPECIFICATION FOR THE ROLLPAY REST API
swagger: "2.0"

info:
  title: Rollpay Rest API
  description: The restful interface for the Rollpay Service
  version: dev mode
produces:
  - application/json
consumes:
  - application/json

schemes:
  - http
  - https

securityDefinitions:
  isAuthenticated:
    type: apiKey
    in: header
    name: Authorization

security:
  - isAuthenticated: []

definitions:
  ####################
  # SECURITY PRINCIPAL
  ####################
  Principal:
    type: object
    properties:
      sessionId:
        type: integer
        readOnly: true
      userId:
        type: integer
        readOnly: true


  StandardResponse:
    type: object
    properties:
      message:
        type: string
        readOnly: true

  ############################################
  # Standard Errors
  ############################################
  StandardError:
    type: object
    properties:
      errorCode:
        type: integer
        format: int32
        readOnly: true
      message:
        type: string
        readOnly: true

  FieldError:
    type: object
    properties:
      field:
        type: string
        readOnly: true
        example: "email"
      description:
        type: string
        readOnly: true
        example: "email address is required"

  ValidationError:
    type: object
    properties:
      errorCode:
        type: integer
        format: int32
      message:
        type: string
      errors:
        type: array
        items:
          $ref: "#/definitions/FieldError"

  ############################################
  # User
  ############################################
  LinkedAccount:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      alias:
        type: string
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  User:
    type: object
    properties:
      id:
        type: string
        readOnly: true
      email:
        type: string
        format: email
      password:
        type: string
        format: password
      avatar:
        type: string
        format: byte
      username:
        type: string
      accounts:
        type: array
        items:
          $ref: "#/definitions/LinkedAccount"
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time

  ############################################
  # Tokens
  ############################################
  LinkToken:
    type: object
    properties:
      token:
        type: string
        readOnly: true

# Global Parameters
parameters:
  userAgent:
    name: User-Agent
    type: string
    in: header
    required: false
    default: test-user

  acceptLang:
    name: Accept-Language
    type: string
    in: header
    description: the accept language header as defined in RFC 7231, section 5.3.5 Accept-Language
    default: en
    required: false

# Global Response Types
responses:
  OkResponse:
    description: operation was successful
    schema:
      $ref: "#/definitions/StandardResponse"

  # ------------
  # Error Responses
  # ------------
  400ErrorResponse:
    description: The provided request was invalid.
    schema:
      $ref: "#/definitions/StandardError"

  401ErrorResponse:
    description: The requested resource requires authentication.
    schema:
      $ref: "#/definitions/StandardError"

  403ErrorResponse:
    description: The request does not contain proper authorization to access this resource.
    schema:
      $ref: "#/definitions/StandardError"

  404ErrorResponse:
    description: The resource requested does not exist.
    schema:
      $ref: "#/definitions/StandardError"

  409ErrorResponse:
    description: A conflict with an existing resource or process occured.
    schema:
      $ref: "#/definitions/StandardError"

  422ErrorResponse:
    description: The request was unprocessable
    schema:
      $ref: "#/definitions/ValidationError"

  500ErrorResponse:
    description: An unexpected system or network error occured.
    schema:
      $ref: "#/definitions/StandardError"

  501ErrorResponse:
    description: The endpoint has not been implemented
    schema:
      $ref: "#/definitions/StandardError"

  503ErrorResponse:
    description: The service is currently not available - please try again
    schema:
      $ref: "#/definitions/StandardError"

  529ErrorResponse:
    description: the reqest limit has been reached - rejecting request
    schema:
      $ref: "#/definitions/StandardError"

paths:
  ##############################################
  # DIAGNOSTIC ENDPOINTS
  ##############################################
  /v1/healthz:
    get:
      tags:
        - Health
      summary: application health check
      operationId: CheckV1
      security: []
      responses:
        200:
          $ref: "#/responses/OkResponse"
        500:
          $ref: "#/responses/500ErrorResponse"

  ##############################################
  # USER ENDPOINTS
  ##############################################
  /v1/user:
    parameters:
      - $ref: "#/parameters/userAgent"
      - $ref: "#/parameters/acceptLang"

    post:
      tags:
        - User
      operationId: CreateUserV1
      summary: create a new user
      security: []
      consumes:
         - multipart/form-data
      parameters:
         - in: formData
           name: avatar
           type: file
           description: the users avatar
           required: true
         - in: formData
           name: email
           type: string
           format: email
           required: true
         - in: formData
           name: password
           type: string
           format: password
           required: true
         - in: formData
           name: username
           type: string
           required: true

      responses:
        201:
          description: a newly created user
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/400ErrorResponse"
        409:
          $ref: "#/responses/409ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse"

  /v1/user/{id}:
    parameters:
      - $ref: "#/parameters/userAgent"
      - $ref: "#/parameters/acceptLang"
      - in: path
        name: id
        required: true
        type: string
        description: the id of the user

    get:
      tags:
        - User
      summary: get a user by id
      operationId: GetUserByIDV1
      responses:
        200:
          description: a
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/400ErrorResponse"
        404:
          $ref: "#/responses/404ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse"

    put:
      tags:
        - User
      summary: update a user by id
      operationId: UpdateUserByIDV1
      consumes:
         - multipart/form-data
      parameters:
         - in: formData
           name: avatar
           type: file
           description: the users avatar
           required: false
         - in: formData
           name: email
           type: string
           format: email
           required: false
         - in: formData
           name: password
           type: string
           format: password
           required: false
         - in: formData
           name: username
           type: string
           required: false

      responses:
        200:
          description: a successfully updated user
          schema:
            $ref: "#/definitions/User"
        400:
          $ref: "#/responses/400ErrorResponse"
        404:
          $ref: "#/responses/404ErrorResponse"
        409:
          $ref: "#/responses/409ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse"

    delete:
      tags:
        - User
      summary: delete a user by id
      operationId: DeleteUserByIDV1
      responses:
        200:
          $ref: "#/responses/OkResponse"
        400:
          $ref: "#/responses/400ErrorResponse"
        404:
          $ref: "#/responses/404ErrorResponse"
        500:
          $ref: "#/responses/500ErrorResponse"

  ##############################################
  # USER ENDPOINTS
  ##############################################
  /v1/auth/link-token:
    parameters:
      - $ref: "#/parameters/userAgent"
      - $ref: "#/parameters/acceptLang"

    post:
      tags:
        - Authorization
      summary: start an authorzation flow for Plaid link
      operationId: StartPlaidLinkV1
      parameters:
        - in: body
          name: user
          schema:
            type: object
            properties:
              id:
                type: string
      responses:
        201:
          description: a newly issued link token
          schema:
            $ref: "#/definitions/LinkToken"
        500:
          $ref: "#/responses/500ErrorResponse"

