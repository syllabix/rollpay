// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrganizationAccounts(t *testing.T) {
	t.Parallel()

	query := OrganizationAccounts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrganizationAccountsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationAccountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrganizationAccounts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationAccountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationAccountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrganizationAccountsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrganizationAccountExists(ctx, tx, o.LinkedAccountID)
	if err != nil {
		t.Errorf("Unable to check if OrganizationAccount exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrganizationAccountExists to return true, but got false.")
	}
}

func testOrganizationAccountsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	organizationAccountFound, err := FindOrganizationAccount(ctx, tx, o.LinkedAccountID)
	if err != nil {
		t.Error(err)
	}

	if organizationAccountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrganizationAccountsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrganizationAccounts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrganizationAccountsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrganizationAccounts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrganizationAccountsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	organizationAccountOne := &OrganizationAccount{}
	organizationAccountTwo := &OrganizationAccount{}
	if err = randomize.Struct(seed, organizationAccountOne, organizationAccountDBTypes, false, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationAccountTwo, organizationAccountDBTypes, false, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrganizationAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrganizationAccountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	organizationAccountOne := &OrganizationAccount{}
	organizationAccountTwo := &OrganizationAccount{}
	if err = randomize.Struct(seed, organizationAccountOne, organizationAccountDBTypes, false, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, organizationAccountTwo, organizationAccountDBTypes, false, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = organizationAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = organizationAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOrganizationAccountsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationAccountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(organizationAccountColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrganizationAccountToOneLinkedAccountUsingLinkedAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrganizationAccount
	var foreign LinkedAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, organizationAccountDBTypes, false, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, linkedAccountDBTypes, false, linkedAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize LinkedAccount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LinkedAccountID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LinkedAccount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrganizationAccountSlice{&local}
	if err = local.L.LoadLinkedAccount(ctx, tx, false, (*[]*OrganizationAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LinkedAccount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LinkedAccount = nil
	if err = local.L.LoadLinkedAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LinkedAccount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrganizationAccountToOneOrganizationUsingOrganization(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrganizationAccount
	var foreign Organization

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, organizationAccountDBTypes, false, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrganizationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Organization().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OrganizationAccountSlice{&local}
	if err = local.L.LoadOrganization(ctx, tx, false, (*[]*OrganizationAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Organization = nil
	if err = local.L.LoadOrganization(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrganizationAccountToOneSetOpLinkedAccountUsingLinkedAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrganizationAccount
	var b, c LinkedAccount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationAccountDBTypes, false, strmangle.SetComplement(organizationAccountPrimaryKeyColumns, organizationAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, linkedAccountDBTypes, false, strmangle.SetComplement(linkedAccountPrimaryKeyColumns, linkedAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, linkedAccountDBTypes, false, strmangle.SetComplement(linkedAccountPrimaryKeyColumns, linkedAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LinkedAccount{&b, &c} {
		err = a.SetLinkedAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LinkedAccount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrganizationAccount != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LinkedAccountID != x.ID {
			t.Error("foreign key was wrong value", a.LinkedAccountID)
		}

		if exists, err := OrganizationAccountExists(ctx, tx, a.LinkedAccountID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testOrganizationAccountToOneSetOpOrganizationUsingOrganization(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrganizationAccount
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, organizationAccountDBTypes, false, strmangle.SetComplement(organizationAccountPrimaryKeyColumns, organizationAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Organization{&b, &c} {
		err = a.SetOrganization(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Organization != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrganizationAccounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrganizationID))
		reflect.Indirect(reflect.ValueOf(&a.OrganizationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID, x.ID)
		}
	}
}

func testOrganizationAccountsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationAccountsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrganizationAccountSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrganizationAccountsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrganizationAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	organizationAccountDBTypes = map[string]string{`LinkedAccountID`: `bigint`, `OrganizationID`: `bigint`}
	_                          = bytes.MinRead
)

func testOrganizationAccountsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(organizationAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(organizationAccountAllColumns) == len(organizationAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrganizationAccountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(organizationAccountAllColumns) == len(organizationAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrganizationAccount{}
	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, organizationAccountDBTypes, true, organizationAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(organizationAccountAllColumns, organizationAccountPrimaryKeyColumns) {
		fields = organizationAccountAllColumns
	} else {
		fields = strmangle.SetComplement(
			organizationAccountAllColumns,
			organizationAccountPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrganizationAccountSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrganizationAccountsUpsert(t *testing.T) {
	t.Parallel()

	if len(organizationAccountAllColumns) == len(organizationAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrganizationAccount{}
	if err = randomize.Struct(seed, &o, organizationAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrganizationAccount: %s", err)
	}

	count, err := OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, organizationAccountDBTypes, false, organizationAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrganizationAccount struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrganizationAccount: %s", err)
	}

	count, err = OrganizationAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
