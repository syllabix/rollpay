// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccounts)
	t.Run("OrganizationAccounts", testOrganizationAccounts)
	t.Run("OrganizationMembers", testOrganizationMembers)
	t.Run("Organizations", testOrganizations)
	t.Run("UserAccounts", testUserAccounts)
	t.Run("Users", testUsers)
}

func TestSoftDelete(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsSoftDelete)
	t.Run("OrganizationMembers", testOrganizationMembersSoftDelete)
	t.Run("Organizations", testOrganizationsSoftDelete)
	t.Run("Users", testUsersSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsQuerySoftDeleteAll)
	t.Run("OrganizationMembers", testOrganizationMembersQuerySoftDeleteAll)
	t.Run("Organizations", testOrganizationsQuerySoftDeleteAll)
	t.Run("Users", testUsersQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsSliceSoftDeleteAll)
	t.Run("OrganizationMembers", testOrganizationMembersSliceSoftDeleteAll)
	t.Run("Organizations", testOrganizationsSliceSoftDeleteAll)
	t.Run("Users", testUsersSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsDelete)
	t.Run("OrganizationAccounts", testOrganizationAccountsDelete)
	t.Run("OrganizationMembers", testOrganizationMembersDelete)
	t.Run("Organizations", testOrganizationsDelete)
	t.Run("UserAccounts", testUserAccountsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsQueryDeleteAll)
	t.Run("OrganizationAccounts", testOrganizationAccountsQueryDeleteAll)
	t.Run("OrganizationMembers", testOrganizationMembersQueryDeleteAll)
	t.Run("Organizations", testOrganizationsQueryDeleteAll)
	t.Run("UserAccounts", testUserAccountsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsSliceDeleteAll)
	t.Run("OrganizationAccounts", testOrganizationAccountsSliceDeleteAll)
	t.Run("OrganizationMembers", testOrganizationMembersSliceDeleteAll)
	t.Run("Organizations", testOrganizationsSliceDeleteAll)
	t.Run("UserAccounts", testUserAccountsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsExists)
	t.Run("OrganizationAccounts", testOrganizationAccountsExists)
	t.Run("OrganizationMembers", testOrganizationMembersExists)
	t.Run("Organizations", testOrganizationsExists)
	t.Run("UserAccounts", testUserAccountsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsFind)
	t.Run("OrganizationAccounts", testOrganizationAccountsFind)
	t.Run("OrganizationMembers", testOrganizationMembersFind)
	t.Run("Organizations", testOrganizationsFind)
	t.Run("UserAccounts", testUserAccountsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsBind)
	t.Run("OrganizationAccounts", testOrganizationAccountsBind)
	t.Run("OrganizationMembers", testOrganizationMembersBind)
	t.Run("Organizations", testOrganizationsBind)
	t.Run("UserAccounts", testUserAccountsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsOne)
	t.Run("OrganizationAccounts", testOrganizationAccountsOne)
	t.Run("OrganizationMembers", testOrganizationMembersOne)
	t.Run("Organizations", testOrganizationsOne)
	t.Run("UserAccounts", testUserAccountsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsAll)
	t.Run("OrganizationAccounts", testOrganizationAccountsAll)
	t.Run("OrganizationMembers", testOrganizationMembersAll)
	t.Run("Organizations", testOrganizationsAll)
	t.Run("UserAccounts", testUserAccountsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsCount)
	t.Run("OrganizationAccounts", testOrganizationAccountsCount)
	t.Run("OrganizationMembers", testOrganizationMembersCount)
	t.Run("Organizations", testOrganizationsCount)
	t.Run("UserAccounts", testUserAccountsCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsInsert)
	t.Run("LinkedAccounts", testLinkedAccountsInsertWhitelist)
	t.Run("OrganizationAccounts", testOrganizationAccountsInsert)
	t.Run("OrganizationAccounts", testOrganizationAccountsInsertWhitelist)
	t.Run("OrganizationMembers", testOrganizationMembersInsert)
	t.Run("OrganizationMembers", testOrganizationMembersInsertWhitelist)
	t.Run("Organizations", testOrganizationsInsert)
	t.Run("Organizations", testOrganizationsInsertWhitelist)
	t.Run("UserAccounts", testUserAccountsInsert)
	t.Run("UserAccounts", testUserAccountsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("OrganizationAccountToLinkedAccountUsingLinkedAccount", testOrganizationAccountToOneLinkedAccountUsingLinkedAccount)
	t.Run("OrganizationAccountToOrganizationUsingOrganization", testOrganizationAccountToOneOrganizationUsingOrganization)
	t.Run("OrganizationMemberToOrganizationUsingOrganization", testOrganizationMemberToOneOrganizationUsingOrganization)
	t.Run("OrganizationMemberToUserUsingUser", testOrganizationMemberToOneUserUsingUser)
	t.Run("UserAccountToLinkedAccountUsingLinkedAccount", testUserAccountToOneLinkedAccountUsingLinkedAccount)
	t.Run("UserAccountToUserUsingUser", testUserAccountToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("LinkedAccountToOrganizationAccountUsingOrganizationAccount", testLinkedAccountOneToOneOrganizationAccountUsingOrganizationAccount)
	t.Run("LinkedAccountToUserAccountUsingUserAccount", testLinkedAccountOneToOneUserAccountUsingUserAccount)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OrganizationToOrganizationAccounts", testOrganizationToManyOrganizationAccounts)
	t.Run("OrganizationToOrganizationMembers", testOrganizationToManyOrganizationMembers)
	t.Run("UserToOrganizationMembers", testUserToManyOrganizationMembers)
	t.Run("UserToUserAccounts", testUserToManyUserAccounts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("OrganizationAccountToLinkedAccountUsingOrganizationAccount", testOrganizationAccountToOneSetOpLinkedAccountUsingLinkedAccount)
	t.Run("OrganizationAccountToOrganizationUsingOrganizationAccounts", testOrganizationAccountToOneSetOpOrganizationUsingOrganization)
	t.Run("OrganizationMemberToOrganizationUsingOrganizationMembers", testOrganizationMemberToOneSetOpOrganizationUsingOrganization)
	t.Run("OrganizationMemberToUserUsingOrganizationMembers", testOrganizationMemberToOneSetOpUserUsingUser)
	t.Run("UserAccountToLinkedAccountUsingUserAccount", testUserAccountToOneSetOpLinkedAccountUsingLinkedAccount)
	t.Run("UserAccountToUserUsingUserAccounts", testUserAccountToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("LinkedAccountToOrganizationAccountUsingOrganizationAccount", testLinkedAccountOneToOneSetOpOrganizationAccountUsingOrganizationAccount)
	t.Run("LinkedAccountToUserAccountUsingUserAccount", testLinkedAccountOneToOneSetOpUserAccountUsingUserAccount)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OrganizationToOrganizationAccounts", testOrganizationToManyAddOpOrganizationAccounts)
	t.Run("OrganizationToOrganizationMembers", testOrganizationToManyAddOpOrganizationMembers)
	t.Run("UserToOrganizationMembers", testUserToManyAddOpOrganizationMembers)
	t.Run("UserToUserAccounts", testUserToManyAddOpUserAccounts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsReload)
	t.Run("OrganizationAccounts", testOrganizationAccountsReload)
	t.Run("OrganizationMembers", testOrganizationMembersReload)
	t.Run("Organizations", testOrganizationsReload)
	t.Run("UserAccounts", testUserAccountsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsReloadAll)
	t.Run("OrganizationAccounts", testOrganizationAccountsReloadAll)
	t.Run("OrganizationMembers", testOrganizationMembersReloadAll)
	t.Run("Organizations", testOrganizationsReloadAll)
	t.Run("UserAccounts", testUserAccountsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsSelect)
	t.Run("OrganizationAccounts", testOrganizationAccountsSelect)
	t.Run("OrganizationMembers", testOrganizationMembersSelect)
	t.Run("Organizations", testOrganizationsSelect)
	t.Run("UserAccounts", testUserAccountsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsUpdate)
	t.Run("OrganizationAccounts", testOrganizationAccountsUpdate)
	t.Run("OrganizationMembers", testOrganizationMembersUpdate)
	t.Run("Organizations", testOrganizationsUpdate)
	t.Run("UserAccounts", testUserAccountsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("LinkedAccounts", testLinkedAccountsSliceUpdateAll)
	t.Run("OrganizationAccounts", testOrganizationAccountsSliceUpdateAll)
	t.Run("OrganizationMembers", testOrganizationMembersSliceUpdateAll)
	t.Run("Organizations", testOrganizationsSliceUpdateAll)
	t.Run("UserAccounts", testUserAccountsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
