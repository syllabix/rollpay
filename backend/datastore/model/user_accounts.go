// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAccount is an object representing the database table.
type UserAccount struct {
	LinkedAccountID int64 `db:"linked_account_id" boil:"linked_account_id" json:"linked_account_id" toml:"linked_account_id" yaml:"linked_account_id"`
	UserID          int64 `db:"user_id" boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *userAccountR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAccountL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAccountColumns = struct {
	LinkedAccountID string
	UserID          string
}{
	LinkedAccountID: "linked_account_id",
	UserID:          "user_id",
}

// Generated where

var UserAccountWhere = struct {
	LinkedAccountID whereHelperint64
	UserID          whereHelperint64
}{
	LinkedAccountID: whereHelperint64{field: "\"user_accounts\".\"linked_account_id\""},
	UserID:          whereHelperint64{field: "\"user_accounts\".\"user_id\""},
}

// UserAccountRels is where relationship names are stored.
var UserAccountRels = struct {
	LinkedAccount string
	User          string
}{
	LinkedAccount: "LinkedAccount",
	User:          "User",
}

// userAccountR is where relationships are stored.
type userAccountR struct {
	LinkedAccount *LinkedAccount `db:"LinkedAccount" boil:"LinkedAccount" json:"LinkedAccount" toml:"LinkedAccount" yaml:"LinkedAccount"`
	User          *User          `db:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userAccountR) NewStruct() *userAccountR {
	return &userAccountR{}
}

// userAccountL is where Load methods for each relationship are stored.
type userAccountL struct{}

var (
	userAccountAllColumns            = []string{"linked_account_id", "user_id"}
	userAccountColumnsWithoutDefault = []string{"linked_account_id", "user_id"}
	userAccountColumnsWithDefault    = []string{}
	userAccountPrimaryKeyColumns     = []string{"linked_account_id"}
)

type (
	// UserAccountSlice is an alias for a slice of pointers to UserAccount.
	// This should generally be used opposed to []UserAccount.
	UserAccountSlice []*UserAccount

	userAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAccountType                 = reflect.TypeOf(&UserAccount{})
	userAccountMapping              = queries.MakeStructMapping(userAccountType)
	userAccountPrimaryKeyMapping, _ = queries.BindMapping(userAccountType, userAccountMapping, userAccountPrimaryKeyColumns)
	userAccountInsertCacheMut       sync.RWMutex
	userAccountInsertCache          = make(map[string]insertCache)
	userAccountUpdateCacheMut       sync.RWMutex
	userAccountUpdateCache          = make(map[string]updateCache)
	userAccountUpsertCacheMut       sync.RWMutex
	userAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userAccount record from the query.
func (q userAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAccount, error) {
	o := &UserAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for user_accounts")
	}

	return o, nil
}

// All returns all UserAccount records from the query.
func (q userAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAccountSlice, error) {
	var o []*UserAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UserAccount slice")
	}

	return o, nil
}

// Count returns the count of all UserAccount records in the query.
func (q userAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count user_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if user_accounts exists")
	}

	return count > 0, nil
}

// LinkedAccount pointed to by the foreign key.
func (o *UserAccount) LinkedAccount(mods ...qm.QueryMod) linkedAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LinkedAccountID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := LinkedAccounts(queryMods...)
	queries.SetFrom(query.Query, "\"linked_accounts\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserAccount) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadLinkedAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAccountL) LoadLinkedAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAccount interface{}, mods queries.Applicator) error {
	var slice []*UserAccount
	var object *UserAccount

	if singular {
		object = maybeUserAccount.(*UserAccount)
	} else {
		slice = *maybeUserAccount.(*[]*UserAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountR{}
		}
		args = append(args, object.LinkedAccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountR{}
			}

			for _, a := range args {
				if a == obj.LinkedAccountID {
					continue Outer
				}
			}

			args = append(args, obj.LinkedAccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`linked_accounts`),
		qm.WhereIn(`linked_accounts.id in ?`, args...),
		qmhelper.WhereIsNull(`linked_accounts.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LinkedAccount")
	}

	var resultSlice []*LinkedAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LinkedAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for linked_accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for linked_accounts")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LinkedAccount = foreign
		if foreign.R == nil {
			foreign.R = &linkedAccountR{}
		}
		foreign.R.UserAccount = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LinkedAccountID == foreign.ID {
				local.R.LinkedAccount = foreign
				if foreign.R == nil {
					foreign.R = &linkedAccountR{}
				}
				foreign.R.UserAccount = local
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userAccountL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAccount interface{}, mods queries.Applicator) error {
	var slice []*UserAccount
	var object *UserAccount

	if singular {
		object = maybeUserAccount.(*UserAccount)
	} else {
		slice = *maybeUserAccount.(*[]*UserAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserAccounts = append(foreign.R.UserAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserAccounts = append(foreign.R.UserAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetLinkedAccount of the userAccount to the related item.
// Sets o.R.LinkedAccount to related.
// Adds o to related.R.UserAccount.
func (o *UserAccount) SetLinkedAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *LinkedAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"linked_account_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.LinkedAccountID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LinkedAccountID = related.ID
	if o.R == nil {
		o.R = &userAccountR{
			LinkedAccount: related,
		}
	} else {
		o.R.LinkedAccount = related
	}

	if related.R == nil {
		related.R = &linkedAccountR{
			UserAccount: o,
		}
	} else {
		related.R.UserAccount = o
	}

	return nil
}

// SetUser of the userAccount to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserAccounts.
func (o *UserAccount) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.LinkedAccountID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userAccountR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserAccounts: UserAccountSlice{o},
		}
	} else {
		related.R.UserAccounts = append(related.R.UserAccounts, o)
	}

	return nil
}

// UserAccounts retrieves all the records using an executor.
func UserAccounts(mods ...qm.QueryMod) userAccountQuery {
	mods = append(mods, qm.From("\"user_accounts\""))
	return userAccountQuery{NewQuery(mods...)}
}

// FindUserAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAccount(ctx context.Context, exec boil.ContextExecutor, linkedAccountID int64, selectCols ...string) (*UserAccount, error) {
	userAccountObj := &UserAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_accounts\" where \"linked_account_id\"=$1", sel,
	)

	q := queries.Raw(query, linkedAccountID)

	err := q.Bind(ctx, exec, userAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from user_accounts")
	}

	return userAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_accounts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(userAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAccountInsertCacheMut.RLock()
	cache, cached := userAccountInsertCache[key]
	userAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAccountAllColumns,
			userAccountColumnsWithDefault,
			userAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAccountType, userAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into user_accounts")
	}

	if !cached {
		userAccountInsertCacheMut.Lock()
		userAccountInsertCache[key] = cache
		userAccountInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userAccountUpdateCacheMut.RLock()
	cache, cached := userAccountUpdateCache[key]
	userAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update user_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, append(wl, userAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update user_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for user_accounts")
	}

	if !cached {
		userAccountUpdateCacheMut.Lock()
		userAccountUpdateCache[key] = cache
		userAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for user_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for user_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in userAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all userAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_accounts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAccountUpsertCacheMut.RLock()
	cache, cached := userAccountUpsertCache[key]
	userAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAccountAllColumns,
			userAccountColumnsWithDefault,
			userAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert user_accounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAccountPrimaryKeyColumns))
			copy(conflict, userAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_accounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAccountType, userAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert user_accounts")
	}

	if !cached {
		userAccountUpsertCacheMut.Lock()
		userAccountUpsertCache[key] = cache
		userAccountUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UserAccount provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"user_accounts\" WHERE \"linked_account_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from user_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for user_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no userAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from user_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from userAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_accounts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAccount(ctx, exec, o.LinkedAccountID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_accounts\".* FROM \"user_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UserAccountSlice")
	}

	*o = slice

	return nil
}

// UserAccountExists checks if the UserAccount row exists.
func UserAccountExists(ctx context.Context, exec boil.ContextExecutor, linkedAccountID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_accounts\" where \"linked_account_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, linkedAccountID)
	}
	row := exec.QueryRowContext(ctx, sql, linkedAccountID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if user_accounts exists")
	}

	return exists, nil
}
